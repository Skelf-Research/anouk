#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// CLI command handler
function main() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        showHelp();
        return;
    }
    
    const command = args[0];
    
    switch (command) {
        case 'init':
            initProject(args[1]);
            break;
        case 'generate':
            generateTemplate(args[1], args[2]);
            break;
        case 'help':
            showHelp();
            break;
        default:
            console.log(`Unknown command: ${command}`);
            showHelp();
    }
}

function showHelp() {
    console.log(`
Anouk CLI - AI Browser Extension Framework

Usage:
  anouk <command> [options]

Commands:
  init <project-name>        Initialize a new Anouk project
  generate <template> <name> Generate a template file
  help                       Show this help message

Templates:
  extension                  Generate a basic extension template
  service                    Generate an AI service template
  config                     Generate a configuration template

Examples:
  anouk init my-extension
  anouk generate extension email-analyzer
  anouk generate service custom-ai-service
`);
}

function initProject(projectName) {
    if (!projectName) {
        console.error('Error: Project name is required');
        console.log('Usage: anouk init <project-name>');
        return;
    }
    
    const projectPath = path.join(process.cwd(), projectName);
    
    // Check if directory already exists
    if (fs.existsSync(projectPath)) {
        console.error(`Error: Directory '${projectName}' already exists`);
        return;
    }
    
    // Create project directory
    fs.mkdirSync(projectPath, { recursive: true });
    
    // Create basic project structure
    createProjectStructure(projectPath);
    
    console.log(`✅ Successfully created Anouk project: ${projectName}`);
    console.log(`📁 Project location: ${projectPath}`);
    console.log('\nNext steps:');
    console.log(`  cd ${projectName}`);
    console.log('  npm install');
    console.log('  npm run build');
}

function createProjectStructure(projectPath) {
    // Create directories
    const dirs = ['src', 'dist', 'icons'];
    dirs.forEach(dir => {
        fs.mkdirSync(path.join(projectPath, dir), { recursive: true });
    });
    
    // Create package.json
    const packageJson = {
        name: path.basename(projectPath),
        version: "1.0.0",
        description: "An AI-powered browser extension",
        scripts: {
            "deps": "npm install",
            "stage": "mkdir dist || echo Dist already exists.",
            "bundle": "esbuild src/extension.js --outdir=dist/ --bundle --sourcemap --target=es6",
            "build": "npm run stage && npm run bundle",
            "dev": "npm run bundle -- --watch"
        },
        dependencies: {
            "anouk": "^1.0.0"
        },
        devDependencies: {
            "esbuild": "^0.23.0"
        }
    };
    
    fs.writeFileSync(
        path.join(projectPath, 'package.json'),
        JSON.stringify(packageJson, null, 2)
    );
    
    // Create manifest.json
    const manifestJson = {
        manifest_version: 3,
        name: path.basename(projectPath),
        version: "1.0",
        description: "An AI-powered browser extension",
        content_scripts: [
            {
                matches: ["<all_urls>"],
                js: ["src/extension.js"],
                run_at: "document_start"
            }
        ],
        web_accessible_resources: [{
            resources: ["dist/*"],
            matches: ["<all_urls>"]
        }],
        permissions: ["storage", "unlimitedStorage"],
        action: {
            default_icon: {
                "16": "icons/icon16.png",
                "48": "icons/icon48.png",
                "128": "icons/icon128.png"
            }
        },
        icons: {
            "16": "icons/icon16.png",
            "32": "icons/icon32.png",
            "48": "icons/icon48.png",
            "128": "icons/icon128.png"
        }
    };
    
    fs.writeFileSync(
        path.join(projectPath, 'manifest.json'),
        JSON.stringify(manifestJson, null, 2)
    );
    
    // Create a basic extension template
    const extensionJs = `// Basic extension template generated by Anouk CLI
import { AIService } from 'anouk';

// Initialize AI service
const aiService = new AIService({
    // Configure your AI provider here
    // providerUrl: 'https://api.openai.com/v1/chat/completions',
    // apiKey: 'your-api-key',
    // model: 'gpt-4'
});

// Wait for page to load
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initExtension);
} else {
    initExtension();
}

function initExtension() {
    console.log('Anouk extension loaded!');
    
    // Add your extension logic here
    // Example: Add a button to the page
    const button = document.createElement('button');
    button.textContent = 'Analyze with AI';
    button.style.position = 'fixed';
    button.style.bottom = '20px';
    button.style.right = '20px';
    button.style.zIndex = '10000';
    button.addEventListener('click', analyzePage);
    document.body.appendChild(button);
}

async function analyzePage() {
    try {
        const content = document.body.innerText;
        const summary = await aiService.call(
            'Summarize the content of this page:', 
            content, 
            'page-analysis', 
            'summary'
        );
        alert(summary);
    } catch (error) {
        console.error('Analysis failed:', error);
        alert('Analysis failed: ' + error.message);
    }
}
`;
    
    fs.writeFileSync(path.join(projectPath, 'src', 'extension.js'), extensionJs);
    
    // Create README.md
    const readme = `# ${path.basename(projectPath)}

An AI-powered browser extension created with Anouk framework.

## Getting Started

1. Install dependencies:
   \`\`\`
   npm install
   \`\`\`

2. Build the extension:
   \`\`\`
   npm run build
   \`\`\`

3. Load the extension in Chrome:
   - Open Chrome and navigate to \`chrome://extensions\`
   - Enable "Developer mode" in the top right corner
   - Click "Load unpacked" and select the project directory

## Development

- Run the development build with watch mode:
  \`\`\`
  npm run dev
  \`\`\`
`;
    
    fs.writeFileSync(path.join(projectPath, 'README.md'), readme);
    
    // Create a placeholder icon directory note
    fs.writeFileSync(
        path.join(projectPath, 'icons', 'README.md'),
        'Add your extension icons here (16x16, 32x32, 48x48, 128x128 PNG files)'
    );
}

function generateTemplate(template, name) {
    if (!template || !name) {
        console.error('Error: Template and name are required');
        console.log('Usage: anouk generate <template> <name>');
        return;
    }
    
    const templatePath = path.join(process.cwd(), 'src', `${name}.js`);
    
    // Check if file already exists
    if (fs.existsSync(templatePath)) {
        console.error(`Error: File '${templatePath}' already exists`);
        return;
    }
    
    // Determine template file path
    const templateFile = path.join(__dirname, '..', 'templates', `${template}-template.js`);
    
    // Check if template file exists
    if (!fs.existsSync(templateFile)) {
        console.error(`Error: Template '${template}' not found`);
        console.log('Available templates: extension, service, config');
        return;
    }
    
    // Read template content
    let content = fs.readFileSync(templateFile, 'utf8');
    
    // Replace placeholder with actual name
    const formattedName = name.replace(/[^a-zA-Z0-9]/g, ' ').replace(/\b\w/g, l => l.toUpperCase()).replace(/\s/g, '');
    const className = formattedName + 'Service';
    content = content.replace(/CustomAIService/g, className);
    content = content.replace(/custom-ai-service/g, name);
    
    fs.writeFileSync(templatePath, content);
    console.log(`✅ Generated ${template} template: ${templatePath}`);
}

function generateExtensionTemplate(name) {
    return `// ${name}.js - Generated by Anouk CLI
import { AIService } from 'anouk';

// Initialize AI service
const aiService = new AIService();

// Your extension logic here
console.log('${name} loaded!');

// Example function using AI service
async function analyzeContent(content) {
    try {
        const result = await aiService.call(
            'Analyze the following content:', 
            content, 
            'content-id', 
            'analysis'
        );
        return result;
    } catch (error) {
        console.error('Analysis failed:', error);
        throw error;
    }
}

export default {
    analyzeContent
};
`;
}

function generateServiceTemplate(name) {
    return `// ${name}.js - Generated by Anouk CLI
import { AIService } from 'anouk';

class ${name.charAt(0).toUpperCase() + name.slice(1)}Service extends AIService {
    constructor(config = {}) {
        super(config);
    }
    
    // Add your custom methods here
    async customAnalysis(content) {
        return await this.call(
            'Perform custom analysis on the following content:', 
            content, 
            'custom-analysis', 
            'result'
        );
    }
}

export default ${name.charAt(0).toUpperCase() + name.slice(1)}Service;
`;
}

function generateConfigTemplate(name) {
    return `// ${name}.js - Generated by Anouk CLI

export const ${name}Config = {
    // Add your configuration options here
    providerUrl: 'https://api.example.com/v1/chat/completions',
    apiKey: process.env.API_KEY || '',
    model: 'default-model',
    systemPrompt: 'You are a helpful assistant.'
};

export default ${name}Config;
`;
}

// Run the CLI
main();