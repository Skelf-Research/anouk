{
  "version": 3,
  "sources": ["../src/configManager.js", "../src/aiService.js"],
  "sourcesContent": ["// configManager.js - Configuration manager for AI service\n\nclass ConfigManager {\n    constructor() {\n        // Default configuration\n        this.defaultConfig = {\n            providerUrl: 'https://api.together.xyz/v1/chat/completions',\n            apiKey: '',\n            model: 'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo',\n            systemPrompt: 'You are a helpful assistant that analyzes emails.'\n        };\n        \n        // Load configuration from storage if available\n        this.loadConfig();\n    }\n    \n    // Load configuration from localStorage\n    loadConfig() {\n        try {\n            const savedConfig = localStorage.getItem('ai-extension-config');\n            if (savedConfig) {\n                this.config = { ...this.defaultConfig, ...JSON.parse(savedConfig) };\n            } else {\n                this.config = { ...this.defaultConfig };\n            }\n        } catch (error) {\n            console.error('Error loading configuration:', error);\n            this.config = { ...this.defaultConfig };\n        }\n    }\n    \n    // Save configuration to localStorage\n    saveConfig(config) {\n        try {\n            this.config = { ...this.config, ...config };\n            localStorage.setItem('ai-extension-config', JSON.stringify(this.config));\n        } catch (error) {\n            console.error('Error saving configuration:', error);\n        }\n    }\n    \n    // Get current configuration\n    getConfig() {\n        return { ...this.config };\n    }\n    \n    // Update specific configuration values\n    updateConfig(key, value) {\n        this.config[key] = value;\n        this.saveConfig(this.config);\n    }\n    \n    // Reset to default configuration\n    resetToDefault() {\n        this.config = { ...this.defaultConfig };\n        this.saveConfig(this.config);\n    }\n}\n\n// Create a singleton instance\nconst configManager = new ConfigManager();\n\nexport default configManager;", "// aiService.js - Configurable AI service for any OpenAI-compatible provider\nimport configManager from './configManager.js';\n\nclass AIService {\n    constructor(config = {}) {\n        // Use provided config or load from config manager\n        this.config = { ...configManager.getConfig(), ...config };\n    }\n\n    async call(instruction, content, emailId, cacheKey) {\n        const cacheFullKey = `${emailId}_${cacheKey}`;\n        const cachedResponse = this.getCachedResponse(cacheFullKey);\n        \n        if (cachedResponse) {\n            console.log(`Using cached response for ${cacheFullKey}`);\n            return cachedResponse;\n        }\n\n        const response = await this.makeRequest(instruction, content);\n        this.setCachedResponse(cacheFullKey, response);\n        return response;\n    }\n\n    async makeRequest(instruction, content) {\n        // Reload config in case it was updated\n        const currentConfig = configManager.getConfig();\n        \n        const response = await fetch(currentConfig.providerUrl, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${currentConfig.apiKey}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                model: currentConfig.model,\n                messages: [\n                    { role: 'system', content: currentConfig.systemPrompt },\n                    { role: 'user', content: `${instruction}\n\n${content}` }\n                ]\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(`API call failed: ${response.statusText}`);\n        }\n\n        const result = await response.json();\n        return result.choices[0].message.content;\n    }\n\n    // Cache helper functions\n    getCachedResponse(key) {\n        try {\n            const cachedData = localStorage.getItem(key);\n            return cachedData ? JSON.parse(cachedData) : null;\n        } catch (error) {\n            console.error('Cache retrieval error:', error);\n            return null;\n        }\n    }\n\n    setCachedResponse(key, data) {\n        try {\n            localStorage.setItem(key, JSON.stringify(data));\n        } catch (error) {\n            console.error('Cache storage error:', error);\n        }\n    }\n    \n    // Method to update configuration\n    updateConfig(newConfig) {\n        configManager.saveConfig(newConfig);\n        this.config = { ...this.config, ...newConfig };\n    }\n    \n    // Method to get current configuration\n    getConfig() {\n        return configManager.getConfig();\n    }\n}\n\nexport default AIService;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,gBAAN,MAAoB;AAAA,IAChB,cAAc;AAEV,WAAK,gBAAgB;AAAA,QACjB,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAGA,WAAK,WAAW;AAAA,IACpB;AAAA;AAAA,IAGA,aAAa;AACT,UAAI;AACA,cAAM,cAAc,aAAa,QAAQ,qBAAqB;AAC9D,YAAI,aAAa;AACb,eAAK,SAAS,kCAAK,KAAK,gBAAkB,KAAK,MAAM,WAAW;AAAA,QACpE,OAAO;AACH,eAAK,SAAS,mBAAK,KAAK;AAAA,QAC5B;AAAA,MACJ,SAAS,OAAO;AACZ,gBAAQ,MAAM,gCAAgC,KAAK;AACnD,aAAK,SAAS,mBAAK,KAAK;AAAA,MAC5B;AAAA,IACJ;AAAA;AAAA,IAGA,WAAW,QAAQ;AACf,UAAI;AACA,aAAK,SAAS,kCAAK,KAAK,SAAW;AACnC,qBAAa,QAAQ,uBAAuB,KAAK,UAAU,KAAK,MAAM,CAAC;AAAA,MAC3E,SAAS,OAAO;AACZ,gBAAQ,MAAM,+BAA+B,KAAK;AAAA,MACtD;AAAA,IACJ;AAAA;AAAA,IAGA,YAAY;AACR,aAAO,mBAAK,KAAK;AAAA,IACrB;AAAA;AAAA,IAGA,aAAa,KAAK,OAAO;AACrB,WAAK,OAAO,GAAG,IAAI;AACnB,WAAK,WAAW,KAAK,MAAM;AAAA,IAC/B;AAAA;AAAA,IAGA,iBAAiB;AACb,WAAK,SAAS,mBAAK,KAAK;AACxB,WAAK,WAAW,KAAK,MAAM;AAAA,IAC/B;AAAA,EACJ;AAGA,MAAM,gBAAgB,IAAI,cAAc;AAExC,MAAO,wBAAQ;;;AC3Df,MAAM,YAAN,MAAgB;AAAA,IACZ,YAAY,SAAS,CAAC,GAAG;AAErB,WAAK,SAAS,kCAAK,sBAAc,UAAU,IAAM;AAAA,IACrD;AAAA,IAEM,KAAK,aAAa,SAAS,SAAS,UAAU;AAAA;AAChD,cAAM,eAAe,GAAG,OAAO,IAAI,QAAQ;AAC3C,cAAM,iBAAiB,KAAK,kBAAkB,YAAY;AAE1D,YAAI,gBAAgB;AAChB,kBAAQ,IAAI,6BAA6B,YAAY,EAAE;AACvD,iBAAO;AAAA,QACX;AAEA,cAAM,WAAW,MAAM,KAAK,YAAY,aAAa,OAAO;AAC5D,aAAK,kBAAkB,cAAc,QAAQ;AAC7C,eAAO;AAAA,MACX;AAAA;AAAA,IAEM,YAAY,aAAa,SAAS;AAAA;AAEpC,cAAM,gBAAgB,sBAAc,UAAU;AAE9C,cAAM,WAAW,MAAM,MAAM,cAAc,aAAa;AAAA,UACpD,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,iBAAiB,UAAU,cAAc,MAAM;AAAA,YAC/C,gBAAgB;AAAA,UACpB;AAAA,UACA,MAAM,KAAK,UAAU;AAAA,YACjB,OAAO,cAAc;AAAA,YACrB,UAAU;AAAA,cACN,EAAE,MAAM,UAAU,SAAS,cAAc,aAAa;AAAA,cACtD,EAAE,MAAM,QAAQ,SAAS,GAAG,WAAW;AAAA;AAAA,EAEzD,OAAO,GAAG;AAAA,YACI;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAED,YAAI,CAAC,SAAS,IAAI;AACd,gBAAM,IAAI,MAAM,oBAAoB,SAAS,UAAU,EAAE;AAAA,QAC7D;AAEA,cAAM,SAAS,MAAM,SAAS,KAAK;AACnC,eAAO,OAAO,QAAQ,CAAC,EAAE,QAAQ;AAAA,MACrC;AAAA;AAAA;AAAA,IAGA,kBAAkB,KAAK;AACnB,UAAI;AACA,cAAM,aAAa,aAAa,QAAQ,GAAG;AAC3C,eAAO,aAAa,KAAK,MAAM,UAAU,IAAI;AAAA,MACjD,SAAS,OAAO;AACZ,gBAAQ,MAAM,0BAA0B,KAAK;AAC7C,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,IAEA,kBAAkB,KAAK,MAAM;AACzB,UAAI;AACA,qBAAa,QAAQ,KAAK,KAAK,UAAU,IAAI,CAAC;AAAA,MAClD,SAAS,OAAO;AACZ,gBAAQ,MAAM,wBAAwB,KAAK;AAAA,MAC/C;AAAA,IACJ;AAAA;AAAA,IAGA,aAAa,WAAW;AACpB,4BAAc,WAAW,SAAS;AAClC,WAAK,SAAS,kCAAK,KAAK,SAAW;AAAA,IACvC;AAAA;AAAA,IAGA,YAAY;AACR,aAAO,sBAAc,UAAU;AAAA,IACnC;AAAA,EACJ;AAEA,MAAO,oBAAQ;",
  "names": []
}
