{
  "version": 3,
  "sources": ["../src/api.js", "../src/extension.js"],
  "sourcesContent": ["// OpenAI API Key (Note: In a production environment, you'd want to handle this more securely)\nconst OPENAI_API_KEY = '98a9f3a23cf7b83243500ead07874aca741dcb34c4031abd3129794411f594a7';\n\n// Queue for API calls\nclass APIQueue {\n    constructor() {\n        this.queue = [];\n        this.isProcessing = false;\n    }\n\n    enqueue(task) {\n        return new Promise((resolve, reject) => {\n            this.queue.push({\n                task,\n                resolve,\n                reject,\n            });\n            this.processQueue();\n        });\n    }\n\n    async processQueue() {\n        if (this.isProcessing) return;\n        this.isProcessing = true;\n\n        while (this.queue.length > 0) {\n            const { task, resolve, reject } = this.queue.shift();\n            try {\n                const result = await task();\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n            // Add a delay between API calls (e.g., 1 second)\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        this.isProcessing = false;\n    }\n}\n\nconst apiQueue = new APIQueue();\n\nasync function callOpenAI(instruction, content) {\n    return apiQueue.enqueue(async () => {\n        const response = await fetch('https://api.together.xyz/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${OPENAI_API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                model: 'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo',\n                messages: [\n                    { role: 'system', content: 'You are a helpful assistant that analyzes emails.' },\n                    { role: 'user', content: `${instruction}\\n\\n${content}` }\n                ]\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(`API call failed: ${response.statusText}`);\n        }\n\n        const result = await response.json();\n        return result.choices[0].message.content;\n    });\n}\n\nexport async function generateSummary(emailBody) {\n    return await callOpenAI('Summarize the following email:', emailBody);\n}\n\nexport async function extractStructuredData(emailBody) {\n    const jsonString = await callOpenAI('Extract key information from this email as JSON:', emailBody);\n    return JSON.parse(jsonString);\n}\n\nexport async function generateReply(emailBody) {\n    return await callOpenAI('Generate a potential reply to this email:', emailBody);\n}\n\nexport async function generateInboxSummary(emailSummaries) {\n    return await callOpenAI('Summarize the state of this inbox based on these recent emails:', emailSummaries);\n}", "\"use strict\";\n\nimport { generateSummary, extractStructuredData, generateReply, generateInboxSummary } from './api.js';\n\n// loader-code: wait until gmailjs has finished loading, before triggering actual extension-code.\nconst loaderId = setInterval(() => {\n    if (!window._gmailjs) {\n        return;\n    }\n\n    clearInterval(loaderId);\n    startExtension(window._gmailjs);\n}, 100);\n\n// actual extension-code\nfunction startExtension(gmail) {\n    console.log(\"Extension loading...\");\n    window.gmail = gmail;\n\n    gmail.observe.on(\"load\", () => {\n        const userEmail = gmail.get.user_email();\n        console.log(\"Hello, \" + userEmail + \". This is your Gmail Assistant!\");\n\n        // Inject sidebar\n        injectSidebar();\n\n        gmail.observe.on(\"view_email\", (domEmail) => {\n            console.log(\"Looking at email:\", domEmail);\n            const emailData = gmail.new.get.email_data(domEmail);\n            console.log(\"Email data:\", emailData);\n            analyzeEmail(emailData);\n        });\n\n        gmail.observe.on(\"compose\", (compose) => {\n            console.log(\"New compose window is opened!\", compose);\n            // You can add compose-specific functionality here if needed\n        });\n    });\n}\n\nfunction injectSidebar() {\n    const sidebar = document.createElement('div');\n    sidebar.id = 'gmail-assistant-sidebar';\n    sidebar.innerHTML = `\n        <h2>Gmail Assistant</h2>\n        <div id=\"email-summary\">\n            <h3>Email Summary</h3>\n            <p>Loading...</p>\n        </div>\n        <div id=\"structured-data\">\n            <h3>Structured Data</h3>\n            <p>Loading...</p>\n        </div>\n        <div id=\"potential-reply\">\n            <h3>Potential Reply</h3>\n            <p>Loading...</p>\n        </div>\n        <div id=\"inbox-summary\">\n            <h3>Inbox Summary</h3>\n            <p>Loading...</p>\n        </div>\n        <div id=\"auto-reply-status\">\n            <h3>Automatic Reply Status</h3>\n            <p>No automatic reply sent</p>\n        </div>\n        <button id=\"send-auto-reply\">\n            Send Automatic Reply\n        </button>\n    `;\n    document.body.appendChild(sidebar);\n\n    // Add event listener for auto-reply button\n    document.getElementById('send-auto-reply').addEventListener('click', handleAutoReply);\n\n    // Inject CSS\n    const style = document.createElement('style');\n    style.textContent = `\n        #gmail-assistant-sidebar {\n            position: fixed;\n            right: 0;\n            top: 0;\n            width: 300px;\n            height: 100%;\n            background: white;\n            border-left: 1px solid #ccc;\n            padding: 20px;\n            overflow-y: auto;\n            z-index: 1000;\n        }\n        #gmail-assistant-sidebar h2 {\n            margin-top: 0;\n        }\n        #gmail-assistant-sidebar h3 {\n            margin-top: 20px;\n        }\n        #gmail-assistant-sidebar pre {\n            white-space: pre-wrap;\n            word-wrap: break-word;\n        }\n        .loading {\n            color: #888;\n            font-style: italic;\n        }\n        button {\n            margin-top: 10px;\n            padding: 5px 10px;\n            background-color: #4285f4;\n            color: white;\n            border: none;\n            border-radius: 3px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #3367d6;\n        }\n    `;\n    document.head.appendChild(style);\n}\n\nasync function analyzeEmail(emailData) {\n    try {\n        console.log(\"Email analysis\");\n        console.log(emailData.content_html);\n\n        const summary = await generateSummary(emailData.content_html);\n        document.getElementById('email-summary').innerHTML = `\n            <h3>Email Summary</h3>\n            <p>${summary}</p>\n        `;\n\n        const structuredData = await extractStructuredData(emailData.content_html);\n        document.getElementById('structured-data').innerHTML = `\n            <h3>Structured Data</h3>\n            <pre>${JSON.stringify(structuredData, null, 2)}</pre>\n        `;\n\n        const reply = await generateReply(emailData.content_html);\n        document.getElementById('potential-reply').innerHTML = `\n            <h3>Potential Reply</h3>\n            <p>${reply}</p>\n        `;\n\n        const inboxSummary = await getInboxSummary();\n        document.getElementById('inbox-summary').innerHTML = `\n            <h3>Inbox Summary</h3>\n            <p>${inboxSummary}</p>\n        `;\n    } catch (error) {\n        console.error('Error analyzing email:', error);\n    }\n}\n\nasync function getInboxSummary() {\n    try {\n        const emails = await getRecentEmails(10);\n        const emailSummaries = emails.map(email => `Subject: ${email.subject}\\nFrom: ${email.from}\\nSnippet: ${email.snippet}`).join('\\n\\n');\n        return await generateInboxSummary(emailSummaries);\n    } catch (error) {\n        console.error('Error generating inbox summary:', error);\n        return 'Unable to generate inbox summary';\n    }\n}\n\nasync function handleAutoReply() {\n    const emailData = window.gmail.new.get.email_data();\n    const matchedRule = matchesAutoReplyRule(emailData);\n    if (matchedRule) {\n        await sendAutomaticReply(emailData, matchedRule);\n        document.getElementById('auto-reply-status').innerHTML = '<p>Automatic reply sent</p>';\n    } else {\n        document.getElementById('auto-reply-status').innerHTML = '<p>No matching rule for automatic reply</p>';\n    }\n}\n\nasync function getRecentEmails(count) {\n    return new Promise((resolve, reject) => {\n        try {\n            const emails = window.gmail.get.visible_emails_async(count)\n                .then(emailIds => {\n                    return Promise.all(emailIds.map(async (emailId) => {\n                        const email = window.gmail.new.get.email_data(emailId);\n                        return {\n                            id: emailId,\n                            subject: email.subject,\n                            from: email.from.name || email.from.email,\n                            snippet: email.snippet,\n                            body: await new Promise(resolve => window.gmail.new.get.email_source_async(emailId, resolve))\n                        };\n                    }));\n                });\n\n            resolve(emails);\n        } catch (error) {\n            console.error('Error fetching recent emails:', error);\n            reject(error);\n        }\n    });\n}\n\n// Define auto-reply rules\nconst autoReplyRules = [\n    {\n        condition: {\n            from: ['newsletter@example.com', 'updates@example.com'],\n            subject: ['Newsletter', 'Weekly Update'],\n            body: ['unsubscribe']\n        },\n        action: 'unsubscribe'\n    },\n    {\n        condition: {\n            from: ['support@example.com'],\n            subject: ['Order Confirmation'],\n            body: ['Thank you for your order']\n        },\n        action: 'acknowledge'\n    }\n];\n\nfunction matchesAutoReplyRule(email) {\n    return autoReplyRules.find(rule => {\n        return (\n            (!rule.condition.from || rule.condition.from.some(sender => email.from.includes(sender))) &&\n            (!rule.condition.subject || rule.condition.subject.some(subj => email.subject.includes(subj))) &&\n            (!rule.condition.body || rule.condition.body.some(text => email.body.includes(text)))\n        );\n    });\n}\n\nasync function sendAutomaticReply(email, rule) {\n    let replyContent;\n    \n    switch(rule.action) {\n        case 'unsubscribe':\n            replyContent = await generateUnsubscribeReply(email);\n            break;\n        case 'acknowledge':\n            replyContent = await generateAcknowledgementReply(email);\n            break;\n        default:\n            console.error('Unknown auto-reply action:', rule.action);\n            return;\n    }\n\n    // Use gmail.js to send the reply\n    window.gmail.tools.add_to_gmail(replyContent);\n    console.log('Automatic reply sent:', replyContent);\n}\n\nasync function generateUnsubscribeReply(email) {\n    const prompt = `Generate a polite email reply requesting to unsubscribe from the newsletter or mailing list. \n    The original email subject was: \"${email.subject}\"\n    It was sent from: ${email.from}`;\n    \n    return await generateReply(prompt);\n}\n\nasync function generateAcknowledgementReply(email) {\n    const prompt = `Generate a brief email reply acknowledging receipt of an order confirmation. \n    The original email subject was: \"${email.subject}\"\n    It was sent from: ${email.from}`;\n    \n    return await generateReply(prompt);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAM,iBAAiB;AAGvB,MAAM,WAAN,MAAe;AAAA,IACX,cAAc;AACV,WAAK,QAAQ,CAAC;AACd,WAAK,eAAe;AAAA,IACxB;AAAA,IAEA,QAAQ,MAAM;AACV,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,aAAK,MAAM,KAAK;AAAA,UACZ;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AACD,aAAK,aAAa;AAAA,MACtB,CAAC;AAAA,IACL;AAAA,IAEM,eAAe;AAAA;AACjB,YAAI,KAAK,aAAc;AACvB,aAAK,eAAe;AAEpB,eAAO,KAAK,MAAM,SAAS,GAAG;AAC1B,gBAAM,EAAE,MAAM,SAAS,OAAO,IAAI,KAAK,MAAM,MAAM;AACnD,cAAI;AACA,kBAAM,SAAS,MAAM,KAAK;AAC1B,oBAAQ,MAAM;AAAA,UAClB,SAAS,OAAO;AACZ,mBAAO,KAAK;AAAA,UAChB;AAEA,gBAAM,IAAI,QAAQ,CAAAA,aAAW,WAAWA,UAAS,GAAI,CAAC;AAAA,QAC1D;AAEA,aAAK,eAAe;AAAA,MACxB;AAAA;AAAA,EACJ;AAEA,MAAM,WAAW,IAAI,SAAS;AAE9B,WAAe,WAAW,aAAa,SAAS;AAAA;AAC5C,aAAO,SAAS,QAAQ,MAAY;AAChC,cAAM,WAAW,MAAM,MAAM,gDAAgD;AAAA,UACzE,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,iBAAiB,UAAU,cAAc;AAAA,YACzC,gBAAgB;AAAA,UACpB;AAAA,UACA,MAAM,KAAK,UAAU;AAAA,YACjB,OAAO;AAAA,YACP,UAAU;AAAA,cACN,EAAE,MAAM,UAAU,SAAS,oDAAoD;AAAA,cAC/E,EAAE,MAAM,QAAQ,SAAS,GAAG,WAAW;AAAA;AAAA,EAAO,OAAO,GAAG;AAAA,YAC5D;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAED,YAAI,CAAC,SAAS,IAAI;AACd,gBAAM,IAAI,MAAM,oBAAoB,SAAS,UAAU,EAAE;AAAA,QAC7D;AAEA,cAAM,SAAS,MAAM,SAAS,KAAK;AACnC,eAAO,OAAO,QAAQ,CAAC,EAAE,QAAQ;AAAA,MACrC,EAAC;AAAA,IACL;AAAA;AAEA,WAAsB,gBAAgB,WAAW;AAAA;AAC7C,aAAO,MAAM,WAAW,kCAAkC,SAAS;AAAA,IACvE;AAAA;AAEA,WAAsB,sBAAsB,WAAW;AAAA;AACnD,YAAM,aAAa,MAAM,WAAW,oDAAoD,SAAS;AACjG,aAAO,KAAK,MAAM,UAAU;AAAA,IAChC;AAAA;AAEA,WAAsB,cAAc,WAAW;AAAA;AAC3C,aAAO,MAAM,WAAW,6CAA6C,SAAS;AAAA,IAClF;AAAA;AAEA,WAAsB,qBAAqB,gBAAgB;AAAA;AACvD,aAAO,MAAM,WAAW,mEAAmE,cAAc;AAAA,IAC7G;AAAA;;;AC/EA,MAAM,WAAW,YAAY,MAAM;AAC/B,QAAI,CAAC,OAAO,UAAU;AAClB;AAAA,IACJ;AAEA,kBAAc,QAAQ;AACtB,mBAAe,OAAO,QAAQ;AAAA,EAClC,GAAG,GAAG;AAGN,WAAS,eAAe,OAAO;AAC3B,YAAQ,IAAI,sBAAsB;AAClC,WAAO,QAAQ;AAEf,UAAM,QAAQ,GAAG,QAAQ,MAAM;AAC3B,YAAM,YAAY,MAAM,IAAI,WAAW;AACvC,cAAQ,IAAI,YAAY,YAAY,iCAAiC;AAGrE,oBAAc;AAEd,YAAM,QAAQ,GAAG,cAAc,CAAC,aAAa;AACzC,gBAAQ,IAAI,qBAAqB,QAAQ;AACzC,cAAM,YAAY,MAAM,IAAI,IAAI,WAAW,QAAQ;AACnD,gBAAQ,IAAI,eAAe,SAAS;AACpC,qBAAa,SAAS;AAAA,MAC1B,CAAC;AAED,YAAM,QAAQ,GAAG,WAAW,CAAC,YAAY;AACrC,gBAAQ,IAAI,iCAAiC,OAAO;AAAA,MAExD,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAEA,WAAS,gBAAgB;AACrB,UAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,YAAQ,KAAK;AACb,YAAQ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BpB,aAAS,KAAK,YAAY,OAAO;AAGjC,aAAS,eAAe,iBAAiB,EAAE,iBAAiB,SAAS,eAAe;AAGpF,UAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,UAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCpB,aAAS,KAAK,YAAY,KAAK;AAAA,EACnC;AAEA,WAAe,aAAa,WAAW;AAAA;AACnC,UAAI;AACA,gBAAQ,IAAI,gBAAgB;AAC5B,gBAAQ,IAAI,UAAU,YAAY;AAElC,cAAM,UAAU,MAAM,gBAAgB,UAAU,YAAY;AAC5D,iBAAS,eAAe,eAAe,EAAE,YAAY;AAAA;AAAA,iBAE5C,OAAO;AAAA;AAGhB,cAAM,iBAAiB,MAAM,sBAAsB,UAAU,YAAY;AACzE,iBAAS,eAAe,iBAAiB,EAAE,YAAY;AAAA;AAAA,mBAE5C,KAAK,UAAU,gBAAgB,MAAM,CAAC,CAAC;AAAA;AAGlD,cAAM,QAAQ,MAAM,cAAc,UAAU,YAAY;AACxD,iBAAS,eAAe,iBAAiB,EAAE,YAAY;AAAA;AAAA,iBAE9C,KAAK;AAAA;AAGd,cAAM,eAAe,MAAM,gBAAgB;AAC3C,iBAAS,eAAe,eAAe,EAAE,YAAY;AAAA;AAAA,iBAE5C,YAAY;AAAA;AAAA,MAEzB,SAAS,OAAO;AACZ,gBAAQ,MAAM,0BAA0B,KAAK;AAAA,MACjD;AAAA,IACJ;AAAA;AAEA,WAAe,kBAAkB;AAAA;AAC7B,UAAI;AACA,cAAM,SAAS,MAAM,gBAAgB,EAAE;AACvC,cAAM,iBAAiB,OAAO,IAAI,WAAS,YAAY,MAAM,OAAO;AAAA,QAAW,MAAM,IAAI;AAAA,WAAc,MAAM,OAAO,EAAE,EAAE,KAAK,MAAM;AACnI,eAAO,MAAM,qBAAqB,cAAc;AAAA,MACpD,SAAS,OAAO;AACZ,gBAAQ,MAAM,mCAAmC,KAAK;AACtD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA;AAEA,WAAe,kBAAkB;AAAA;AAC7B,YAAM,YAAY,OAAO,MAAM,IAAI,IAAI,WAAW;AAClD,YAAM,cAAc,qBAAqB,SAAS;AAClD,UAAI,aAAa;AACb,cAAM,mBAAmB,WAAW,WAAW;AAC/C,iBAAS,eAAe,mBAAmB,EAAE,YAAY;AAAA,MAC7D,OAAO;AACH,iBAAS,eAAe,mBAAmB,EAAE,YAAY;AAAA,MAC7D;AAAA,IACJ;AAAA;AAEA,WAAe,gBAAgB,OAAO;AAAA;AAClC,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,YAAI;AACA,gBAAM,SAAS,OAAO,MAAM,IAAI,qBAAqB,KAAK,EACrD,KAAK,cAAY;AACd,mBAAO,QAAQ,IAAI,SAAS,IAAI,CAAO,YAAY;AAC/C,oBAAM,QAAQ,OAAO,MAAM,IAAI,IAAI,WAAW,OAAO;AACrD,qBAAO;AAAA,gBACH,IAAI;AAAA,gBACJ,SAAS,MAAM;AAAA,gBACf,MAAM,MAAM,KAAK,QAAQ,MAAM,KAAK;AAAA,gBACpC,SAAS,MAAM;AAAA,gBACf,MAAM,MAAM,IAAI,QAAQ,CAAAC,aAAW,OAAO,MAAM,IAAI,IAAI,mBAAmB,SAASA,QAAO,CAAC;AAAA,cAChG;AAAA,YACJ,EAAC,CAAC;AAAA,UACN,CAAC;AAEL,kBAAQ,MAAM;AAAA,QAClB,SAAS,OAAO;AACZ,kBAAQ,MAAM,iCAAiC,KAAK;AACpD,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAGA,MAAM,iBAAiB;AAAA,IACnB;AAAA,MACI,WAAW;AAAA,QACP,MAAM,CAAC,0BAA0B,qBAAqB;AAAA,QACtD,SAAS,CAAC,cAAc,eAAe;AAAA,QACvC,MAAM,CAAC,aAAa;AAAA,MACxB;AAAA,MACA,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,WAAW;AAAA,QACP,MAAM,CAAC,qBAAqB;AAAA,QAC5B,SAAS,CAAC,oBAAoB;AAAA,QAC9B,MAAM,CAAC,0BAA0B;AAAA,MACrC;AAAA,MACA,QAAQ;AAAA,IACZ;AAAA,EACJ;AAEA,WAAS,qBAAqB,OAAO;AACjC,WAAO,eAAe,KAAK,UAAQ;AAC/B,cACK,CAAC,KAAK,UAAU,QAAQ,KAAK,UAAU,KAAK,KAAK,YAAU,MAAM,KAAK,SAAS,MAAM,CAAC,OACtF,CAAC,KAAK,UAAU,WAAW,KAAK,UAAU,QAAQ,KAAK,UAAQ,MAAM,QAAQ,SAAS,IAAI,CAAC,OAC3F,CAAC,KAAK,UAAU,QAAQ,KAAK,UAAU,KAAK,KAAK,UAAQ,MAAM,KAAK,SAAS,IAAI,CAAC;AAAA,IAE3F,CAAC;AAAA,EACL;AAEA,WAAe,mBAAmB,OAAO,MAAM;AAAA;AAC3C,UAAI;AAEJ,cAAO,KAAK,QAAQ;AAAA,QAChB,KAAK;AACD,yBAAe,MAAM,yBAAyB,KAAK;AACnD;AAAA,QACJ,KAAK;AACD,yBAAe,MAAM,6BAA6B,KAAK;AACvD;AAAA,QACJ;AACI,kBAAQ,MAAM,8BAA8B,KAAK,MAAM;AACvD;AAAA,MACR;AAGA,aAAO,MAAM,MAAM,aAAa,YAAY;AAC5C,cAAQ,IAAI,yBAAyB,YAAY;AAAA,IACrD;AAAA;AAEA,WAAe,yBAAyB,OAAO;AAAA;AAC3C,YAAM,SAAS;AAAA,uCACoB,MAAM,OAAO;AAAA,wBAC5B,MAAM,IAAI;AAE9B,aAAO,MAAM,cAAc,MAAM;AAAA,IACrC;AAAA;AAEA,WAAe,6BAA6B,OAAO;AAAA;AAC/C,YAAM,SAAS;AAAA,uCACoB,MAAM,OAAO;AAAA,wBAC5B,MAAM,IAAI;AAE9B,aAAO,MAAM,cAAc,MAAM;AAAA,IACrC;AAAA;",
  "names": ["resolve", "resolve"]
}
